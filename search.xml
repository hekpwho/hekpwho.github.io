<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>爬虫入门笔记</title>
      <link href="/2022/04/09/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/04/09/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="网页的基本结构"><a href="#网页的基本结构" class="headerlink" title="网页的基本结构"></a>网页的基本结构</h2><ul><li>HTML：负责定义网页的内容，属于一种标签语言，标签是由<em>尖括号</em>包围的关键词组成，比如 <html>，并且通常是<em>成对出现</em>的</li><li>CSS ：负责描述网页的布局，其编写方法有三种，分别是行内样式、内嵌样式和外联样式。</li><li>JavaScript：负责网页的行为<span id="more"></span></li></ul><h2 id="Chrome检查功能"><a href="#Chrome检查功能" class="headerlink" title="Chrome检查功能"></a>Chrome检查功能</h2><p>启动：空白处点击鼠标右键（或者按快捷键：F12），在出现的会话框中点击“检查”</p><p>点击审查元素按钮（左边上面的小箭头），然后将鼠标移动至您想检查的位置，然后单击，此时就会将该位置的代码段显示出来。</p><h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><h3 id="requests"><a href="#requests" class="headerlink" title="requests:"></a>requests:</h3><ul><li><p>安装及导入：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install requests </span><br><span class="line">import requests</span><br></pre></td></tr></table></figure></li><li><p>七个主要方法:（以下皆返回一个Response对象）</p></li></ul><table><thead><tr><th align="left">方法</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">requests.request()</td><td align="left">构造一个请求，支持以下各种方法</td></tr><tr><td align="left">requests.get()</td><td align="left">获取html的主要方法</td></tr><tr><td align="left">requests.head()</td><td align="left">获取html头部信息的主要方法</td></tr><tr><td align="left">requests.post()</td><td align="left">向html网页提交post请求的方法</td></tr><tr><td align="left">requests.put()</td><td align="left">向html网页提交put请求的方法</td></tr><tr><td align="left">requests.patch()</td><td align="left">向html提交局部修改的请求</td></tr><tr><td align="left">requests.delete()</td><td align="left">向html提交删除请求</td></tr></tbody></table><p> <strong>重点</strong> :举例说明（**requests.get()**）：这个方法是我们平时最常用的方法之一，通过这个方法我们可以了解到其他的方法，所以我们详细介绍这个方法。 </p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r=requests.get(url,params,**kwargs)</span><br></pre></td></tr></table></figure><ul><li><p>params：字典或字节序列， 作为参数增加到url中,使用这个参数可以把一些键值对以?key1&#x3D;value1&amp;key2&#x3D;value2的模式增加到url中</p></li><li><p>headers：字典形式，http定制头</p></li><li><p>cookies：字典或CookieJar，request中的cookie</p></li><li><p>timeout: 用于设定超时时间， 单位为秒，当发起一个get请求时可以设置一个timeout时间， 如果在timeout时间内请求内容没有返回， 将产生一个timeout的异常。</p></li><li><p>proxies：字典， 用来设置访问代理服务器。</p></li><li><p>…….</p><p>其中response对象有以下属性：</p></li></ul><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">r.status_code</td><td align="left">http请求的返回状态，若为200则表示请求成功。</td></tr><tr><td align="left">r.text</td><td align="left">http响应内容的字符串形式，即返回的页面内容</td></tr><tr><td align="left">r.encoding</td><td align="left">从http header 中猜测的相应内容编码方式</td></tr><tr><td align="left">r.apparent_encoding</td><td align="left">从内容中分析出的响应内容编码方式（备选编码方式）</td></tr><tr><td align="left">r.content</td><td align="left">http响应内容的二进制形式</td></tr><tr><td align="left">r.url</td><td align="left">获取请求的地址</td></tr><tr><td align="left">r.headers</td><td align="left">查看响应头</td></tr><tr><td align="left">r.cookies</td><td align="left">获取返回的cookies</td></tr></tbody></table><h3 id="lxml"><a href="#lxml" class="headerlink" title="lxml"></a><strong>lxml</strong></h3><ul><li><p>导入及使用</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br><span class="line">from lxml import  etree</span><br></pre></td></tr></table></figure></li><li><p>创建解析对象,调用 etree 模块的 HTML() 方法来创建 HTML 解析对象。如下所示：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parse_html = etree.HTML(html)</span><br></pre></td></tr></table></figure><ul><li>解析HTML</li></ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r_list = parse_html.xpath(&#x27;xpath表达式&#x27;)</span><br></pre></td></tr></table></figure><p>Xpath基本语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nodename  :选取此节点的所有子节点。</span><br><span class="line">   /  :从根节点选取（取子节点）</span><br><span class="line">   // :从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置（取子孙节点）</span><br><span class="line">   . :选取当前节点</span><br><span class="line">   .. :选取当前节点的父节点</span><br><span class="line">   @ :选取属性,常用元素属性有 @id 、@name、@type、@class、@tittle、@href</span><br></pre></td></tr></table></figure><p> xpath通配符</p><table><thead><tr><th>通配符</th><th>描述说明</th></tr></thead><tbody><tr><td>*</td><td>匹配任意元素节点</td></tr><tr><td>@*</td><td>匹配任意属性节点</td></tr><tr><td>node()</td><td>匹配任意类型的节点</td></tr></tbody></table><p> Xpath内建函数</p><table><thead><tr><th>函数名称</th><th>xpath表达式示例</th><th>示例说明</th></tr></thead><tbody><tr><td>text()</td><td>.&#x2F;text()</td><td>文本匹配，表示值取当前节点中的文本内容。获取多个节点下第一层节点的所有内容，不包括子节点，且结果是list。</td></tr><tr><td>contains()</td><td>&#x2F;&#x2F;div[contains(@id,’stu’)]</td><td>模糊匹配，表示选择 id 中包含“stu”的所有 div 节点。</td></tr><tr><td>last()</td><td>&#x2F;&#x2F;*[@class&#x3D;’web’][last()]</td><td>位置匹配，表示选择@class&#x3D;’web’的最后一个节点。</td></tr><tr><td>position()</td><td>&#x2F;&#x2F;*[@class&#x3D;’site’][position()&lt;&#x3D;2]</td><td>位置匹配，表示选择@class&#x3D;’site’的前两个节点。</td></tr><tr><td>start-with()</td><td>“&#x2F;&#x2F;input[start-with(@id,’st’)]”</td><td>匹配 id 以 st 开头的元素。</td></tr><tr><td>ends-with()</td><td>“&#x2F;&#x2F;input[ends-with(@id,’st’)]”</td><td>匹配 id 以 st 结尾的元素。</td></tr><tr><td>concat(string1,string2)</td><td>concat(‘C语言中文网’,.&#x2F;&#x2F;*[@class&#x3D;’stie’]&#x2F;@href)</td><td>C语言中文与标签类别属性为”stie”的 href 地址做拼接。</td></tr></tbody></table><p>谓语（Predicates）:<br>用来查找某个特定的节点或者包含某个指定的值的节点<br>谓语被嵌在方括号中。从一开始!</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim学习笔记</title>
      <link href="/2022/04/04/vim%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/04/04/vim%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="vim的三种模式"><a href="#vim的三种模式" class="headerlink" title="vim的三种模式"></a>vim的三种模式</h1><ul><li>命令模式: 就是日常首先进入vim所处的模式.</li><li>插入模式:在此模式下，Vim 可以对文件执行写操作;进行输入模式的方式是在命令模式状态下输入 i、I、a、A、o、O 等插入命令,按 Esc 键即可返回命令模式.<span id="more"></span></li><li>编辑模式: 用于对文件中的指定内容执行保存、查找或替换等操作。切换到编辑模式的方法是在命令模式状态下按“：”键，这时就可以输入相关指令进行操作,按ESC键可随时退出底线命令模式.</li></ul><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h2 id="光标移动-在命令模式下"><a href="#光标移动-在命令模式下" class="headerlink" title="光标移动(在命令模式下)"></a><em>光标移动</em>(在命令模式下)</h2><ul><li>gg文件最上方</li><li>G 文件最下面</li><li>f+要移动的地方</li><li>$到当前行的末尾</li><li>0到当前行的前面</li><li>nG光标移动到第 n 行，n 为数字</li><li>:n编辑模式下使用的快捷键，可以将光标快速定义到指定行的行首</li></ul><h2 id="快捷编辑-也在命令模式下"><a href="#快捷编辑-也在命令模式下" class="headerlink" title="快捷编辑(也在命令模式下)"></a><em>快捷编辑</em>(也在命令模式下)</h2><ul><li>I:在光标所在行的 <em>行首</em> 插入随后输入的文本</li><li>A在光标所在行的 <em>行尾</em> 插入随后输入的文本</li><li>o在光标所在行的 <em>下面</em> 插入新的一行。光标停在空行首，等待输入文本</li><li>O（大写）在光标所在行的 <em>上面</em> 插入新的一行。光标停在空行的行首，等待输入文本</li></ul><h2 id="查找文本-命令模式"><a href="#查找文本-命令模式" class="headerlink" title="查找文本(命令模式)"></a>查找文本(命令模式)</h2><ul><li>&#x2F; 下搜索、n下 N上</li><li>?上搜索，n下 N上</li></ul><h2 id="替换-进入编辑模式"><a href="#替换-进入编辑模式" class="headerlink" title="替换(进入编辑模式)"></a>替换(进入编辑模式)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:s/old/new      //用new替换行中首次出现的old</span><br><span class="line">:s/old/new/g         //用new替换行中所有的old</span><br><span class="line">:n,m s/old/new/g     //用new替换从n到m行里所有的old</span><br><span class="line">:%s/old/new/g      //用new替换当前文件里所有的old</span><br></pre></td></tr></table></figure><h2 id="撤销和恢复-命令模式"><a href="#撤销和恢复-命令模式" class="headerlink" title="撤销和恢复(命令模式)"></a>撤销和恢复(命令模式)</h2><ul><li>u（小写）功能是撤销最近一次对文本做的修改操作。</li><li>Ctrl+R 功能是恢复最近一次所做的撤销操作。</li></ul><h2 id="删除文本-命令模式"><a href="#删除文本-命令模式" class="headerlink" title="删除文本(命令模式)"></a>删除文本(命令模式)</h2><ul><li>x删除光标所在位置的字符</li><li>dd删除光标所在行</li><li>D 等同于dd</li><li>ndd删除当前行（包括此行）后 n 行文本</li><li>dG删除光标所在行一直到文件末尾的所有内容</li><li>ggdG全部剪切，gg是最上面，dG是从当前行剪切到文件结束<br><strong>注意，被删除的内容并没有真正删除，都放在了剪贴板中。将光标移动到指定位置处，按下 “p” 键，就可以将刚才删除的内容又粘贴到此处</strong></li></ul><h2 id="复制与粘贴"><a href="#复制与粘贴" class="headerlink" title="复制与粘贴"></a>复制与粘贴</h2><ul><li>p将剪贴板中的内容粘贴到光标后</li><li>yy复制一行</li><li>Y等同于yy</li><li>yG从当前行复制到文件结束</li><li>2yy复制两行</li><li>ggyG全部复制，gg是最上面，yG是从当前行复制到文件结束</li></ul><h2 id="宏-可以录制一组命令，然后重复执行。"><a href="#宏-可以录制一组命令，然后重复执行。" class="headerlink" title="宏(可以录制一组命令，然后重复执行。)"></a>宏(可以录制一组命令，然后重复执行。)</h2><ul><li>q[a-z] 开始录制宏</li><li>q  停止录制</li><li>@[a-z] 使用宏</li><li>@@ 调用最近使用的宏</li><li>22@[a-z] 多次重放宏</li></ul><h2 id="简单的算术运算-命令模式"><a href="#简单的算术运算-命令模式" class="headerlink" title="简单的算术运算(命令模式)"></a>简单的算术运算(命令模式)</h2><ul><li>使用CTRL-a快捷键，可以将当前光标下的数字加1</li><li>使用CTRL-x快捷键，可以将当前光标下的数字减1。</li><li>n CTRL-a 可以将当前光标下的数字加n</li><li>n CTRL-x 可以将当前光标下的数字减n</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vmware安装archlinux记录</title>
      <link href="/2022/02/22/Vmware%E5%AE%89%E8%A3%85archlinux%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/02/22/Vmware%E5%AE%89%E8%A3%85archlinux%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="安装的准备"><a href="#安装的准备" class="headerlink" title="安装的准备"></a>安装的准备</h1><p>首先去 <a href="https://archlinux.org/download/">这里</a>   下载最新的arch镜像。</p><ul><li>新建虚拟机，注意选择其他linux版本64位，开启cpu虚拟化intel&#x2F;amd引擎，网络连接设置NAT模式。</li><li>进入虚拟机设置，点击 <strong>选项</strong> 里的<strong>高级</strong>，更改固件类型为uefi,启动安装。<span id="more"></span></li></ul><h1 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h1><p>1 . 当引导加载程序菜单出现，选择<strong>Arch Linux install medium</strong>并按enter 进入，之后就进入了linux 的终端界面。</p><p>2 . <strong>更改字体</strong>，因为虚拟机中字体实在是太小了，更换一下有助于接下来的操作，使用下列命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfont /usr/share/kbd/consolefont/ter-132b</span><br></pre></td></tr></table></figure><p>3 . <strong>验证启动模式,</strong> 可以使用以下命令,如果没有显示目录且没有报告错误，则系统以 UEFI 模式启动,_如果目录不存在，_则系统_可能_以 <a href="https://en.wikipedia.org/wiki/BIOS">BIOS</a> 模式 (或 <a href="https://en.wikipedia.org/wiki/Compatibility_Support_Module">CSM</a> 模式) 引导。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /sys/firmware/efi/efivar</span><br></pre></td></tr></table></figure><p>4.<strong>.网络</strong>，一般虚拟机安装都是默认为有线网卡连接，故应该已经联网，使用以下命令验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p>注：可以使用以下命令自动配置动态IP 地址和分配DNS服务器（可选）  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start dhcpcd</span><br></pre></td></tr></table></figure><p>5.<strong>更新系统时间</strong>为亚洲上海时间, 可以使用 <code>timedatectl status</code> 检查服务状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-timezone &quot;Asia/Shanghai&quot;</span><br><span class="line">timedatectl set-ntp true</span><br></pre></td></tr></table></figure><p>6.<strong>.选择镜像源</strong>，使用以下命令自动挑选最快的源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reflector --country China --age 24   --protocol https --save /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><p>7.<strong>分区</strong>: 这是最重要的部分，本人使用fdisk来完成这一操作: fdisk -l<br>系统如果识别到磁盘，就会将其分配为一个块设备，如 &#x2F;dev&#x2F;sda、&#x2F;dev&#x2F;nvme0n1 或 &#x2F;dev&#x2F;mmcblk0。结果中以 rom、loop 或者 airoot 结尾的设备可以被忽略。</p><p>对于一个选定的设备，以下分区是必须要有的：</p><ul><li>一个根分区， <code>/</code></li><li>因为刚刚已经设置了为UEFI模式，故还需要_EFI系统分区，这是一个引导分区</li><li>一个交换空间分区，&#x2F;swap (可选)</li></ul><p>执行命令<code>fdisk /dev/sdx （请将sdx替换成你要操作的磁盘如sdb sdc等）</code></p><p>1.输入g来创建一个全新的gpt分区表，仅针对虚拟机安装用户，</p><p>2.输入<code>n</code>创建一个新的分区，首先会让你选择起始扇区，一般直接回车使用默认数值即可，然后可以输入结束扇区或是分区大小，这里我们输入<code>+300M</code>来创建一个300M的<strong>引导分区。</strong></p><p>3.输入<code>n</code>创建一个新的分区，首先会让你选择起始扇区，一般直接回车使用默认数值即可，然后可以输入结束扇区或是分区大小，这里我们输入<code>+512M</code>来创建一个512M的<strong>交换空间</strong></p><p>4.输入<code>n</code>创建一个新的分区，首先会让你选择起始扇区，一般直接回车使用默认数值即可，然后可以输入结束扇区或是分区大小，这里我们默认直接回车，让<strong>根分区</strong>完全占满空闲的空间</p><p>5.输入w来将之前所有的操作写入磁盘生效，在这之前可以输入p来确认自己的分区表没有错误。以下为我的分区情况:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/dev/sda1  300M      type:EFI system    （EFI系统分区）</span><br><span class="line">/dev/sda2  512M    type:Linux swap   (交换空间)</span><br><span class="line">/dev/sda3  剩余   type:Linux filesystem   (/目录)</span><br></pre></td></tr></table></figure><p>8.<strong>格式化分区</strong><br>当分区建立好了，每个新建立的分区都需要使用合适的 文件系统 进行格式化。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/sda3（请将的sda3替换为你刚创建的根分区）</span><br><span class="line">mkfs.vfat /dev/sda1（请将的sda1替换为你刚创建的EFI分区）</span><br><span class="line">mkswap /dev/sda2（初始化交换空间分区，请将sda2替换为你刚创建的交换分区）</span><br></pre></td></tr></table></figure><p>9.<strong>挂载分区</strong>：<em>注意： 挂载分区一定要遵循顺序，先挂载根（root）分区（到 &#x2F;mnt），再挂载引导（boot）分区（到 &#x2F;mnt&#x2F;boot 或 &#x2F;mnt&#x2F;efi，如果单独分出来了的话），最后再挂载其他分区。否则您可能遇到安装完成后无法启动系统的问题。</em> 以下为我的示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">swapon /dev/sda2        #启用交换分区</span><br><span class="line">mount  /dev/sda3  /mnt  #将根磁盘卷 挂载 到 /mnt</span><br><span class="line">mkdir /mnt/boot    #创建boot挂载点</span><br><span class="line">mount /dev/sda1 /mnt/boot #挂载引导分区</span><br></pre></td></tr></table></figure><p>10.<strong>安装基本包</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap /mnt base base-devel linux linux-firmware dhcpcd vim vi sudo</span><br></pre></td></tr></table></figure><p>11.<strong>配置Fstab</strong>,生成自动挂载分区的<code>fstab</code>文件，执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genfstab -L /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure><p>执行完以上命令，可以检查生成的文件是否正确： <code>cat /mnt/etc/fstab</code></p><p>12.<strong>Change root 到新安装的系统</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure><p>13.<strong>设置时区</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><p>设置硬件时钟</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure><p>14.<strong>本地化</strong>, 先编辑&#x2F;etc&#x2F;locale.gen，使用<code>vim /etc/locale.gen</code>，在文件中找到<br>这四行，去掉行首的#号，保存并退出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br><span class="line">zh_HK.UTF-8 UTF-8 </span><br><span class="line">zh_TW.UTF-8 UTf-8</span><br></pre></td></tr></table></figure><p>接着执行 locale-gen 以生成 locale 信息</p><p>然后创建 &#x2F;etc&#x2F;locale.conf 文件，在文件的第一行加入以下内容：<code>LANG=en_US.UTF-8</code>，保存并退出。</p><p>15.<strong>.设置主机名</strong>：创建 hostname 文件: <code>vim /etc/hostname</code>,在文件的第一行输入你自己设定的一个主机名</p><p>编辑<code>/etc/hosts</code>文件：<code>vim /etc/hosts</code>，在文件末添加如下内容（将myhostname替换成你自己设定的主机名）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost</span><br><span class="line">127.0.1.1myhostname.localdomainmyhostname</span><br></pre></td></tr></table></figure><p>16.<strong>设置Root密码</strong>，输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p>17:<strong>安装微码</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对于 AMD 处理器，安装 amd-ucode。</span><br><span class="line">对于 Intel 处理器，安装 intel-ucode。</span><br><span class="line">pacman -S   amd-ucode</span><br></pre></td></tr></table></figure><p>18:<strong>安装引导程序</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pacman -S grub efibootmgr</span><br><span class="line"></span><br><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot  --bootloader-id=GRUB </span><br><span class="line"></span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p>19.<strong>退出 chroot 环境及手动卸载被挂载的分区</strong>,如果挂载了<code>/mnt/boot</code>，先<code>umount /mnt/boot</code>，再<code>umount /mnt</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exit   #退出 chroot 环境</span><br><span class="line">umount /mnt/boot</span><br><span class="line">umount /mnt #手动卸载被挂载的分区</span><br></pre></td></tr></table></figure><p><strong>20.至此，安装完成！！！</strong></p><h1 id="安装后的工作"><a href="#安装后的工作" class="headerlink" title="安装后的工作"></a>安装后的工作</h1><p>1.<strong>安装Vmware tools：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman -S  open-vm-tools  gtkmm3 xf86-input-vmmouse xf86-video-vmware mesa</span><br><span class="line">systemctl start vmtoolsd</span><br><span class="line">systemctl enable vmtoolsd</span><br></pre></td></tr></table></figure><p>2.<strong>新建用户</strong>：执行以下命令来<strong>创建</strong>一个名为username的用户（请自行替换username为你的用户名）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -m -G wheel username （请自行替换username为你的用户名）</span><br></pre></td></tr></table></figure><p>为新用户设置一个密码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd username （请自行替换username为你的用户名）</span><br></pre></td></tr></table></figure><p>接下来我们需要用专门的<strong>visudo命令</strong>来编辑sudo的配置文件,找到<code># %wheel ALL=(ALL)ALL</code>这行，去掉之前的#注释符，保存并退出就可以了。</p><p>3.<strong>安装中文字体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S  adobe-source-han-sans-cn-fonts  adobe-source-han-serif-cn-fonts    noto-fonts-emoji  wqy-zenhei  wqy-microhei  wqy-bitmapfont  ttf-arphic-ukai ttf-arphic-uming noto-fonts-cjk</span><br></pre></td></tr></table></figure><p>4 . 使登录后自动自动联网</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable dhcpcd</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>5.再次修改终端字体,这次选择持久性改变字体,在&#x2F;etc&#x2F;vconsole.conf 的 FONT 变量可以用来在启动时设置字体, 对于所有的终端都具有持久性作用。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vconsole.conf</span><br><span class="line">FONT=sun12x22</span><br></pre></td></tr></table></figure><p>6.<strong>危险操作</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -Syyu</span><br></pre></td></tr></table></figure><h1 id="软件清单"><a href="#软件清单" class="headerlink" title="软件清单"></a>软件清单</h1><p>1.首先添加 AUR 仓库,这里使用 yay :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone</span><br><span class="line">https://aur.archlinux.org/yay.git</span><br><span class="line">cd yay</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure><p>再启用archlinuxcn仓库,编辑<br>&#x2F;etc&#x2F;pacman.conf 文件末尾添加两行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure><p>然后请执行安装GPG key。 然后刷新源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S archlinuxcn-keyring </span><br><span class="line">sudo pacman -Syy</span><br></pre></td></tr></table></figure><p>2.桌面三大件:dwm,rofi,alacritty</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xorg-apps xorg-xinit xorg-server</span><br><span class="line">git clone https://git.suckless.org/dwm</span><br><span class="line">cd dwm/</span><br><span class="line">sudo make clean install </span><br><span class="line">sudo pacman -S rofi</span><br><span class="line">sudo pacman -S alacritty</span><br></pre></td></tr></table></figure><p>在dwm下的config.def.h文件下更改,使dwm支持rofi和alacritty</p><p>3.浏览器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S google-chrome</span><br></pre></td></tr></table></figure><p>4.markdown编辑器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S typora-free </span><br></pre></td></tr></table></figure><p>5.音视频播放器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S mpv</span><br></pre></td></tr></table></figure><p>6.下载工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S wget</span><br><span class="line">sudo pacman -S axel</span><br><span class="line">pip install you-get   #网络视频下载</span><br></pre></td></tr></table></figure><p>7,pdf阅读器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S evince</span><br></pre></td></tr></table></figure><p>9 .壁纸与窗口渲染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S feh</span><br><span class="line">sudo pacman -S picom</span><br></pre></td></tr></table></figure><p>注:在通过picom设置毛玻璃效果时，如果你想对某个窗口进行特殊设置,就会用到选择器,使用<code>xprop</code>即可获取</p><p>10.音量调节</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S alsa-utils</span><br></pre></td></tr></table></figure><p>11.录屏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S peek</span><br></pre></td></tr></table></figure><p>12 .输入法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx-im fcitx-configtool fcitx-googlepinyin</span><br></pre></td></tr></table></figure><p>注:Fcitx 自带剪贴板，其快捷键为 “Ctrl + ;” ,小小功能拯救世界!!!</p><p>参考链接: <a href="https://www.viseator.com/2017/05/17/arch_install/">https://www.viseator.com/2017/05/17/arch_install&#x2F;</a><br><a href="https://www.lcd1024.xyz/2021/05/02/archlinux/">https://www.lcd1024.xyz/2021/05/02/archlinux/</a><br><a href="https://wiki.archlinux.org/title/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/title/Installation_guide_(简体中文)</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> arch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>termux搭建博客</title>
      <link href="/2020/08/16/termux%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/08/16/termux%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h1><p>打开termux,输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg update &amp;&amp; pkg upgrade -y</span><br></pre></td></tr></table></figure><p>待更新完成后，安装一些必要的工具:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install nodejs-lts vim git  -y</span><br></pre></td></tr></table></figure><p>再是使用淘宝镜像:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>  <span id="more"></span><p>接着就是安装hexo:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>再来初始化文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>注:此时的blog文件夹里存放的就是hexo博客系统的核心文件，以后你的文章创作和主题配置都要在此目录下完成，(此时的文件夹可以任意取名，不是非要叫blog)</p><p>接着就是启动本地服务器:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>正常启动之后，在浏览器输入：<a href="http://localhost:4000/">http://localhost:4000/</a> 这时候就能看到我们已经搭好的Hexo博客了!</p><h1 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h1><p>首先你需要先在github建一个仓库，名为 username.github.io， username就是你的github用户名,接着安装openssh:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install openssh -y</span><br></pre></td></tr></table></figure><p>然后输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你注册GitHub用的邮箱。</p><p>创建ssh:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>然后回车三次，输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /data/data/com.termux/files/home/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>此时显示的就是就是一个ssh秘钥，在github首页上，点击自己的头像，点击下面的setting,再找到_SSH and GPG keys_,添加ssh key。</p><p>查看是否成功，输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果出现yes&amp;no的问题，选yes即可，当看到:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi username You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>就代表已经成功了！</p><p>接着在blog目录下找到_config.yml,翻到最后，修改为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">  ## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">  deploy:</span><br><span class="line">      type: git</span><br><span class="line">      repo: git@github.com:username/username.github.io.git</span><br><span class="line">      branch: master</span><br></pre></td></tr></table></figure><p>再在blog目录下安装一个插件，来完成推送到github的事:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>接着:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>你就可以在 <a href="https://username.github.io/">https://username.github.io/</a> 看到自己的网站了！</p><p>附: 常用命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo help  #帮助</span><br><span class="line">hexo clean  #清除缓存和已生成的静态文件</span><br><span class="line">hexo new &quot;name&quot; # 新建文章 </span><br><span class="line">hexo new page &quot;name&quot; # 新建页面</span><br><span class="line">hexo g # 生成静态页面</span><br><span class="line">hexo s   #本地预览</span><br><span class="line">hexo d  #部署</span><br><span class="line">hexo g -d  #生成页面并部署</span><br></pre></td></tr></table></figure><h1 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h1><p>在任意网站购得域名，然后登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你所购的域名，然后在你创建的博客文件夹blog下的source目录中创建一个名为CNAME文件，不要后缀。写上你的域名。</p><h1 id="个人使用插件"><a href="#个人使用插件" class="headerlink" title="个人使用插件"></a>个人使用插件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line"></span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line"></span><br><span class="line">npm install hexo-permalink-pinyin --save</span><br><span class="line"></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果网站速度太慢，可以尝试使用vercel</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> termux </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
